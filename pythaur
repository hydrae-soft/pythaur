#!/usr/bin/env python
from argparse import ArgumentParser, Namespace
from os.path import expanduser, isdir
from shutil import rmtree
from sys import exit
from typing import List
import signal

from models.package import Package, is_on_aur
from operations.install import clone, install

aur_dir = expanduser('~') + '/AUR/'


def main():
    signal.signal(signal.SIGINT,
                  signal_handler)
    
    start_installation(parse_arguments())


def start_installation(args: Namespace):
    packages = build_packages(args.install)
    cleanup = args.cleanup
    if len(packages) > 0:
        if check_packages(packages) > 0:
            clone(packages)
            install(packages)
            if cleanup:
                rmtree(aur_dir)


def parse_arguments() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument('-i', '--install',
                        nargs='+', required=True,
                        help='Use this flag to specify the names of the packages to be installed.')
    parser.add_argument('-c', '--cleanup',
                        action='store_true', required=False,
                        help='Removes cloned files from AUR.')
    return parser.parse_args()


def build_packages(names_list: list) -> List[Package]:
    pkgs = []
    for n in names_list:
        pkgs.append(Package(n, aur_dir + n))
    return pkgs


def check_packages(pkgs: List[Package]) -> int:
    i = 0
    while i < len(pkgs):
        p = pkgs[i]
        print('Checking if \"%s\" package exists in AUR...' % p.name)
        if not is_on_aur(p):
            pkgs.pop(i)
        else:
            i += 1
    return i


def signal_handler(_signal, _frame):
    print('Operation cancelled.')
    if isdir(aur_dir):
        print('Cleaning up...')
        rmtree(aur_dir)
    exit(0)


main()

