#!/usr/bin/env python
from argparse import ArgumentParser
from os.path import expanduser, isdir
from shutil import rmtree
from sys import exit
from models.package import Package, is_on_aur
from operations.install import clone, install
import signal

# Destination of the cloned files
AUR_DIR = expanduser('~') + '/AUR/'

def main():
    signal.signal(signal.SIGINT,
                  signal_handler)
    args = parse_arguments()
    packages = create_packages_list(args.install)
    cleanup = args.cleanup
    if len(packages) > 0:
        if check_packages(packages) > 0:
            clone(packages, AUR_DIR)
            install(packages)
            if cleanup:
                rmtree(AUR_DIR)


def parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('-i', '--install',
                        nargs='+', required=True,
                        help='Use this flag to specify the names of the packages to be installed.')
    parser.add_argument('-c', '--cleanup',
                        action='store_true', required=False,
                        help='Removes cloned files from AUR.')
    return parser.parse_args()

# Creates a list of packages with their AUR respective links.
def create_packages_list(names_list: list):
    pkgs = []
    for n in names_list:
        pkgs.append(Package(n, AUR_DIR + n))
    return pkgs


# Removes packages that were not found in AUR. Will return 0 if there are no valid packages.
def check_packages(pkgs: list) -> int:
    i = 0
    while i < len(pkgs):
        p = pkgs[i]
        print('Checking if \"%s\" package exists in AUR...' % p.name)
        if not is_on_aur(p):
            pkgs.pop(i)
        else:
            i += 1
    return i

# Handle Ctrl + C
def signal_handler(_signal, _frame):
    print('Operation cancelled.')
    if isdir(AUR_DIR):
        print('Cleaning up...')
        rmtree(AUR_DIR)
    exit(0)


main()

